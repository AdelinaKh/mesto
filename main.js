(()=>{"use strict";function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r){var o=e.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._container=n,this._renderer=o,this._api=r}var n,r;return n=t,(r=[{key:"addItem",value:function(e){this._container.prepend(e)}},{key:"renderItems",value:function(e){var t=this;e.forEach((function(e){t.addItem(t._renderer(e))}))}}])&&e(n.prototype,r),Object.defineProperty(n,"prototype",{writable:!1}),t}();function n(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var r=function(){function e(t){var n,r,o=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),r=function(e){"Escape"===e.key&&o.close()},(n="_closeEsc")in this?Object.defineProperty(this,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):this[n]=r,this._popup=document.querySelector(t),this._closeButton=this._popup.querySelector(".popup__close-button"),this._closeOverlay=this._popup.querySelector(".popup__overlay")}var t,r;return t=e,(r=[{key:"open",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._closeEsc)}},{key:"close",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._closeEsc)}},{key:"setEventListeners",value:function(){var e=this;this._closeButton.addEventListener("click",(function(t){return e.close(t)})),this._closeOverlay.addEventListener("click",(function(t){return e.close(t)}))}}])&&n(t.prototype,r),Object.defineProperty(t,"prototype",{writable:!1}),e}();function o(e){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},o(e)}function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function u(){return u="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=c(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},u.apply(this,arguments)}function c(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}function a(e,t){return a=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},a(e,t)}function l(e,t){if(t&&("object"===o(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return s(e)}function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var p=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&a(e,t)}(p,e);var t,n,r,o,c=(r=p,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(r);if(o){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return l(this,e)});function p(e,t,n){var r,o,i,u;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,p),u=function(e){r._submitHandler(e,r._getInputValues())},(i="_handler")in(o=s(r=c.call(this,e)))?Object.defineProperty(o,i,{value:u,enumerable:!0,configurable:!0,writable:!0}):o[i]=u,r._submitHandler=t,r._popupForm=r._popup.querySelector(".popup__form"),r._inputList=r._popupForm.querySelectorAll(".popup__text"),r._api=n,r._submitBtn=r._popup.querySelector(".popup__save-button"),r}return t=p,(n=[{key:"_getInputValues",value:function(){var e=this;return this._formValue={},this._inputList.forEach((function(t){return e._formValue[t.name]=t.value})),this._formValue}},{key:"setEventListeners",value:function(){u(f(p.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",this._handler)}},{key:"close",value:function(){u(f(p.prototype),"close",this).call(this),this._popupForm.reset()}},{key:"renderLoading",value:function(e){this._submitBtn.textContent=e?"Сохранение...":"Сохранить"}}])&&i(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),p}(r);function h(e){return h="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},h(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=_(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},y.apply(this,arguments)}function _(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=m(e)););return e}function v(e,t){return v=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},v(e,t)}function b(e,t){if(t&&("object"===h(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function m(e){return m=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},m(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&v(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=m(r);if(o){var n=m(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return b(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._image=t._popup.querySelector(".popup__image"),t._title=t._popup.querySelector(".popup__description"),t}return t=u,(n=[{key:"open",value:function(e,t){this._image.src=t,this._image.alt=e,this._title.innerText=e,y(m(u.prototype),"open",this).call(this)}}])&&d(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(r);function k(e){return k="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},k(e)}function w(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function S(){return S="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=E(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(arguments.length<3?e:n):o.value}},S.apply(this,arguments)}function E(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=j(e)););return e}function O(e,t){return O=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},O(e,t)}function L(e,t){if(t&&("object"===k(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function j(e){return j=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},j(e)}var P=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&O(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=j(r);if(o){var n=j(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return L(this,e)});function u(e){var t;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(t=i.call(this,e))._popupFormDelete=t._popup.querySelector(".popup__content-delete"),t}return t=u,(n=[{key:"setSubmitAction",value:function(e){this._submitHandledDelete=e}},{key:"setEventListeners",value:function(){var e=this;S(j(u.prototype),"setEventListeners",this).call(this),this._popupFormDelete.addEventListener("submit",(function(t){t.preventDefault(),e._submitHandledDelete()}))}}])&&w(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),u}(r);function C(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var q=function(){function e(t,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._userName=document.querySelector(t),this._userJob=document.querySelector(n),this._userAvatar=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._userName.textContent,job:this._userJob.textContent}}},{key:"getAvatarInfo",value:function(){return{avatar:this._userAvatar.src}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.job;this._userName.textContent=t,this._userJob.textContent=n}},{key:"setAvatarInfo",value:function(e){this._userAvatar.src=e}}])&&C(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function I(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var B=function(){function e(t,n,r,o,i,u,c){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._card=t,this._text=t.name,this._link=t.link,this._like=t.likes,this._id=t._id,this._owner=t.owner,this._user=n,this._api=c,this._template=r,this._handlerCardClick=o,this._handlerDeleteCard=i,this._handlerCardLike=u}var t,n;return t=e,(n=[{key:"_createElement",value:function(){this._element=this._template.content.querySelector(".card").cloneNode(!0)}},{key:"_addEventListeners",value:function(){var e=this;this._likeButton.addEventListener("click",(function(){return e._handlerCardLike(e)})),this._cardImage.addEventListener("click",(function(){return e._handlerCardClick(e._text,e._link)})),this._deleteBtn.addEventListener("click",(function(){return e._handlerDeleteCard(e)})),this._user!==this._owner._id&&(this._deleteBtn=this._element.querySelector(".card__delete").classList.add("card__delete-none"))}},{key:"_toggleLike",value:function(){this._checkUser()?this.setLike():this.unsetLike()}},{key:"updateLikes",value:function(e){this._likeCounter.textContent=e.length}},{key:"setLike",value:function(){this._likeButton.classList.add("card__like_active"),this.isLiked=!0}},{key:"unsetLike",value:function(){this._likeButton.classList.remove("card__like_active"),this.isLiked=!1}},{key:"_checkUser",value:function(){var e=this;return this._like.some((function(t){return t._id===e._user}))}},{key:"render",value:function(e){return this._createElement(),this._cardImage=this._element.querySelector(".card__image"),this._element.querySelector(".card__title").innerText=this._text,this._cardImage.src=this._link,this._cardImage.alt=this._text,this._likeButton=this._element.querySelector(".card__like"),this._likeCounter=this._element.querySelector(".card__heart"),this._confirmBtn=document.querySelector(".popup_delete-card").querySelector(".popup__save-button"),this._deleteBtn=this._element.querySelector(".card__delete"),this._toggleLike(),this._likeCounter.textContent=this._like.length,this._addEventListeners(),this._element}}])&&I(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function R(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function A(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}var x=function(){function e(t,n){var r=this;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),A(this,"_hideInputError",(function(e){var t=r._config,n=t.inputErrorClass,o=t.errorClass,i=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(n),i.classList.remove(o),i.textContent=""})),A(this,"_showInputError",(function(e,t){var n=r._config,o=n.inputErrorClass,i=n.errorClass,u=r._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(o),u.textContent=t,u.classList.add(i)})),A(this,"_checkInputValidity",(function(e){e.validity.valid?r._hideInputError(e):r._showInputError(e,e.validationMessage)})),A(this,"toggleButtonState",(function(){var e=r._formElement.checkValidity();r._submitButton.disabled=!e,r._submitButton.classList.toggle(r._inactiveButton,!e)})),A(this,"_setEventListeners",(function(){r.toggleButtonState(),r._inputList.forEach((function(e){e.addEventListener("input",(function(){r._checkInputValidity(e),r.toggleButtonState()}))}))})),A(this,"enableValidation",(function(){r._setEventListeners(),r._formElement.addEventListener("submit",(function(e){e.preventDefault()}))})),this._formElement=t,this._config=n,this._inputList=Array.from(this._formElement.querySelectorAll(this._config.inputSelector)),this._submitButton=this._formElement.querySelector(this._config.submitButtonSelector),this._inactiveButton=this._config.inactiveButtonClass}var t,n;return t=e,(n=[{key:"resetValidation",value:function(){var e=this;this.toggleButtonState(),this._inputList.forEach((function(t){e._hideInputError(t)}))}}])&&R(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function T(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var U=function(e){return e.ok?e.json():Promise.reject("Ошибка: ".concat(e.status))},D=function(){function e(t){var n=t.baseUrl,r=t.headers;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._baseUrl=n,this._headers=r}var t,n;return t=e,(n=[{key:"getInitialCards",value:function(){return fetch("".concat(this._baseUrl,"/cards"),{method:"GET",headers:this._headers}).then(U)}},{key:"getUserInfo",value:function(){return fetch("".concat(this._baseUrl,"/users/me"),{method:"GET",headers:this._headers}).then(U)}},{key:"postNewCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards"),{method:"POST",headers:this._headers,body:JSON.stringify({name:e.title,link:e.subtitle})}).then(U)}},{key:"editUserInfo",value:function(e){return fetch("".concat(this._baseUrl,"/users/me"),{method:"PATCH",headers:this._headers,body:JSON.stringify({name:e.title,about:e.subtitle})}).then(U)}},{key:"editAvatar",value:function(e){return fetch("".concat(this._baseUrl,"/users/me/avatar"),{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e["avatar-link"]})}).then(U)}},{key:"deleteCard",value:function(e){return fetch("".concat(this._baseUrl,"/cards/").concat(e),{method:"DELETE",headers:this._headers}).then(U)}},{key:"postLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"PUT",headers:this._headers}).then(U)}},{key:"deleteLike",value:function(e){return fetch("".concat(this._baseUrl,"/cards/likes/").concat(e),{method:"DELETE",headers:this._headers}).then(U)}}])&&T(t.prototype,n),Object.defineProperty(t,"prototype",{writable:!1}),e}();function V(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=new Array(t);n<t;n++)r[n]=e[n];return r}function N(e,t,n){return N=F()?Reflect.construct:function(e,t,n){var r=[null];r.push.apply(r,t);var o=new(Function.bind.apply(e,r));return n&&H(o,n.prototype),o},N.apply(null,arguments)}function F(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}function H(e,t){return H=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},H(e,t)}var J,z=document.querySelector(".popup_cards"),G=document.querySelector(".card-template"),M=document.querySelector(".elements"),$=document.querySelector(".popup_resize"),K=$.querySelector(".popup__image"),Q=$.querySelector(".popup__description"),W=z.querySelector(".popup__content-cards"),X=document.querySelector(".popup_delete-card"),Y=(document.querySelector(".card__delete"),X.querySelector(".popup__save-button"),document.querySelector(".profile")),Z=document.querySelector(".popup__content-profile"),ee=Z.querySelector(".popup__text_input_name"),te=Z.querySelector(".popup__text_input_job"),ne=Y.querySelector(".profile__open-button"),re=document.querySelector(".profile__add-button"),oe=document.querySelector(".popup__content-avatar"),ie=oe.querySelector(".popup__text_input_link"),ue=document.querySelector(".profile__avatar"),ce=(oe.querySelector(".popup__save-button"),new D({baseUrl:"https://mesto.nomoreparties.co/v1/cohort-34",headers:{authorization:"ca29b227-17c7-4423-a03d-c2e1486957f2","Content-Type":"application/json"}})),ae=function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return N(B,t.concat([G,_e,de,fe,ce]))},le=new t({renderer:function(e){return e._id,ae(e,J).render()}},M,ce),se=new q(".profile__name",".profile__job",".profile__avatar");function fe(){var e=this;this.isLiked?ce.deleteLike(this._id).then((function(t){e.unsetLike(),e.updateLikes(t.likes)})).catch((function(e){console.log("Ошибка: ".concat(e))})):ce.postLike(this._id).then((function(t){e.setLike(),e.updateLikes(t.likes)})).catch((function(e){console.log("Ошибка: ".concat(e))}))}Promise.all([ce.getInitialCards(),ce.getUserInfo()]).then((function(e){var t,n,r=(n=2,function(e){if(Array.isArray(e))return e}(t=e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,o,i=[],u=!0,c=!1;try{for(n=n.call(e);!(u=(r=n.next()).done)&&(i.push(r.value),!t||i.length!==t);u=!0);}catch(e){c=!0,o=e}finally{try{u||null==n.return||n.return()}finally{if(c)throw o}}return i}}(t,n)||function(e,t){if(e){if("string"==typeof e)return V(e,t);var n=Object.prototype.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?V(e,t):void 0}}(t,n)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[0],i=r[1];console.log(o),console.log(i),J=i._id,le.renderItems(o),se.setUserInfo({name:i.name,job:i.about}),i.avatar,se.setAvatarInfo(i.avatar)})).catch((function(e){console.log("Ошибка: ".concat(e))}));var pe=new p(".popup_cards",(function(e,t){var n=t.title,r=t.subtitle;e.preventDefault(),pe.renderLoading(!0),ce.postNewCard({title:n,subtitle:r}).then((function(e){var t=ae(e,J).render();le.addItem(t),pe.close()})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){pe.renderLoading(!1)}))}),ce);pe.setEventListeners();var he=new P(".popup_delete-card");function de(){var e=this;he.open(),he.setSubmitAction((function(){ce.deleteCard(e._id).then((function(t){e._element.remove(),he.close()})).catch((function(e){console.log("Ошибка: ".concat(e))}))}))}he.setEventListeners();var ye=new g(".popup_resize",Q,K);function _e(e,t){ye.open(e,t)}ye.setEventListeners();var ve=new p(".popup_avatar-update",(function(e,t){e.preventDefault(),ve.renderLoading(!0),ce.editAvatar(t).then((function(e){se.setAvatarInfo(e.avatar),ve.close()})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){ve.renderLoading(!1)}))}),ce);ve.setEventListeners();var be=new p(".popup_profile",(function(e,t){var n=t.title,r=t.subtitle;e.preventDefault(),be.renderLoading(!0),ce.editUserInfo({title:n,subtitle:r}).then((function(e){se.setUserInfo({name:e.name,job:e.about}),be.close()})).catch((function(e){console.log("Ошибка: ".concat(e))})).finally((function(){be.renderLoading(!1)}))}),ce);be.setEventListeners(),ue.addEventListener("click",(function(){var e=se.getAvatarInfo();ie.value=e.avatar,ve.open(),ge[Z.getAttribute("name")].resetValidation()})),ne.addEventListener("click",(function(){var e=se.getUserInfo();ee.value=e.name,te.value=e.job,be.open(),ge[Z.getAttribute("name")].resetValidation()})),re.addEventListener("click",(function(){pe.open(),ge[W.getAttribute("name")].resetValidation()}));var me,ge={};me={formSelector:".popup__form",inputSelector:".popup__text",submitButtonSelector:".popup__save-button",inactiveButtonClass:"popup__save-button_disabled",inputErrorClass:"popup__text_type_error",errorClass:"popup__input-error_shown"},Array.from(document.querySelectorAll(me.formSelector)).forEach((function(e){var t=new x(e,me),n=e.getAttribute("name");ge[n]=t,t.enableValidation()}))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,